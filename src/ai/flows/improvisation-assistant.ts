// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI-powered improvisation assistant for dungeon masters.
 *
 * - generateImprovisationSuggestions - A function that generates improvisation suggestions based on player actions.
 * - ImprovisationAssistantInput - The input type for the generateImprovisationSuggestions function.
 * - ImprovisationAssistantOutput - The return type for the generateImprovisationSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ImprovisationAssistantInputSchema = z.object({
  playerActions: z
    .string()
    .describe('A description of the player actions that require improvisation.'),
  tone: z
    .string()
    .optional()
    .describe('The desired tone of the improvisation (e.g., gritty, humorous, epic).'),
  urgency: z.string().optional().describe('The urgency of the situation.'),
  factionInvolvement: z
    .string()
    .optional()
    .describe('The factions involved in the situation.'),
});
export type ImprovisationAssistantInput = z.infer<typeof ImprovisationAssistantInputSchema>;

const ImprovisationAssistantOutputSchema = z.object({
  plotHookSuggestion: z
    .string()
    .describe('A suggestion for a plot hook based on the player actions.'),
  npcReactionSuggestion: z
    .string()
    .describe('A suggestion for an NPC reaction based on the player actions.'),
  environmentalDetailSuggestion: z
    .string()
    .describe('A suggestion for an environmental detail based on the player actions.'),
});
export type ImprovisationAssistantOutput = z.infer<typeof ImprovisationAssistantOutputSchema>;

export async function generateImprovisationSuggestions(
  input: ImprovisationAssistantInput
): Promise<ImprovisationAssistantOutput> {
  return improvisationAssistantFlow(input);
}

const prompt = ai.definePrompt({
  name: 'improvisationAssistantPrompt',
  input: {schema: ImprovisationAssistantInputSchema},
  output: {schema: ImprovisationAssistantOutputSchema},
  prompt: `You are an AI-powered improvisation assistant for dungeon masters. Based on the player actions, you will suggest plot hooks, NPC reactions, and environmental details.

Player Actions: {{{playerActions}}}
{{~#if tone}}
Tone: {{{tone}}}
{{~/if}}
{{~#if urgency}}
Urgency: {{{urgency}}}
{{~/if}}
{{~#if factionInvolvement}}
Faction Involvement: {{{factionInvolvement}}}
{{~/if}}

Suggestion:
Plot Hook: {{plotHookSuggestion}}
NPC Reaction: {{npcReactionSuggestion}}
Environmental Detail: {{environmentalDetailSuggestion}}`,
});

const improvisationAssistantFlow = ai.defineFlow(
  {
    name: 'improvisationAssistantFlow',
    inputSchema: ImprovisationAssistantInputSchema,
    outputSchema: ImprovisationAssistantOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
